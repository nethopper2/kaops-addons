{{- if .Values.backups.enabled }}
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ include "private-ai.fullname" . }}-pg-backup
  labels:
    {{- include "private-ai.labels" . | nindent 4 }}
spec:
  schedule: {{ .Values.backups.schedule }}
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: OnFailure
          {{- if and (eq .Values.backups.type "s3") .Values.backups.serviceAccountName }}
          serviceAccountName: {{ .Values.backups.serviceAccountName }}
          {{- end }}
          containers:
          - name: pg-backup
            {{- if eq .Values.backups.type "s3" }}
            image: postgres:17-alpine
            {{- else }}
            image: google/cloud-sdk:524.0.0-slim
            {{- end }}
            env:
            - name: PGHOST
              value: {{ .Values.rag.postgresHost }}
            - name: PGPORT
              value: "5432"
            - name: PGUSER
              value: {{ .Values.global.postgresql.auth.username }}
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.postgresql.auth.existingSecret }}
                  key: {{ .Values.global.postgresql.auth.secretKeys.adminPasswordKey }}
            {{- if eq .Values.backups.type "s3" }}
            {{- if not .Values.backups.serviceAccountName }}
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.backups.s3AccessKeySecretRef }}
                  key: AWS_ACCESS_KEY_ID
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.backups.s3AccessKeySecretRef }}
                  key: AWS_SECRET_ACCESS_KEY
            {{- end }}
            - name: AWS_DEFAULT_REGION
              value: {{ .Values.backups.s3Region }}
            - name: BACKUP_BUCKET
              value: {{ .Values.backups.s3BucketName }}
            {{- else }}
            - name: GOOGLE_APPLICATION_CREDENTIALS
              value: /secrets/gcp/key.json
            - name: GOOGLE_APPLICATION_CREDENTIALS_BASE64
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.backups.googleApplicationCredentialsSecretRef | default .Values.global.googleApplicationCredentialsSecretRef }}
                  key: GOOGLE_APPLICATION_CREDENTIALS_BASE64
            - name: BACKUP_BUCKET
              value: {{ .Values.backups.gcsBucketName }}
            {{- end }}
            command: ["/bin/sh", "-c"]
            args:
            {{- if eq .Values.backups.type "s3" }}
            - |
              echo "Installing AWS CLI..." && \
              apk add --no-cache aws-cli && \
              TS=$(date +%Y%m%d_%H%M%S) && \
              echo "Dumping all DBs…" && \
              pg_dumpall --host=$PGHOST --port=$PGPORT --username=$PGUSER | gzip > /tmp/all_dbs.sql.gz && \
              echo "Uploading to S3…" && \
              aws s3 cp /tmp/all_dbs.sql.gz s3://$BACKUP_BUCKET/postgres/$TS/all_dbs.sql.gz && \
              echo "Upload complete: s3://$BACKUP_BUCKET/postgres/$TS/all_dbs.sql.gz" && \
              rm /tmp/all_dbs.sql.gz
            {{- else }}
            - |
              apt-get update && apt-get install -y curl gnupg2 lsb-release && \
              echo "deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list && \
              curl -fsSL https://www.postgresql.org/media/keys/ACCC4CF8.asc | gpg --dearmor -o /etc/apt/trusted.gpg.d/postgresql.gpg && \
              apt-get update && apt-get install -y postgresql-client-17 && \
              echo "Decoding Google credentials..." && \
              mkdir -p $(dirname $GOOGLE_APPLICATION_CREDENTIALS) && \
              echo $GOOGLE_APPLICATION_CREDENTIALS_BASE64 | base64 -d > $GOOGLE_APPLICATION_CREDENTIALS 2>/dev/null || echo "Continue..." && \
              chmod 600 $GOOGLE_APPLICATION_CREDENTIALS || true && \
              echo "Google credentials saved to $GOOGLE_APPLICATION_CREDENTIALS" && \
              echo "Authenticating with Google Cloud…" && \
              gcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS && \
              TS=$(date +%Y%m%d_%H%M%S) && \
              echo "Dumping all DBs…" && \
              pg_dumpall --host=$PGHOST --port=$PGPORT --username=$PGUSER \
                | gzip \
                | gsutil cp - gs://$BACKUP_BUCKET/postgres/$TS/all_dbs.sql.gz && \
              echo "Upload complete: gs://$BACKUP_BUCKET/postgres/$TS/all_dbs.sql.gz"
            {{- end }}
{{- end }}