global:
  extraEnvVarsCM: shared-configmap-rag
  extraEnvVarsSecret: shared-secrets-rag
  googleApplicationCredentialsSecretRef: # user provided
  postgresql:
    auth:
      username: postgres
      existingSecret: postgresql-password
      secretKeys:
        adminPasswordKey: postgresPassword
dataIngestion:
  enabled: false
  config:
    dataSourcesUrl:
    overideWebSocketUrl:
    encryptionKey:
    gcsServiceAccountCredentials:
    googleClientId:
    googleClientSecret:
    googleRedirectUrl:
    microsoftClientId:
    microsoftClientSecret:
    microsoftTenantId:
    microsoftRedirectUrl:
    slackClientId:
    slackClientSecret:
    slackRedirectUrl:
    atlassianClientId:
    atlassianClientSecret:
    atlassianRedirectUrl:
ingress:
  enabled: true
  class: nginx
  oauthProviderName:
  oauth2Proxy:
    enabled: true
    adminEmail: "admin@nethopper.io"
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    kubernetes.io/tls-acme: "true"
    nginx.ingress.kubernetes.io/backend-protocol: http
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/tls-acme: "true"
  host:
  additionalHosts: []
  tls:
    - hosts:
open-webui:
  image:
    repository: nethopper/kaops-open-webui
    tag: 0.6.15-alpha.6 # This should match the appVersion in Chart.yaml
    pullPolicy: Always
  ollama:
    persistentVolume:
      enabled: true
    ollama:
      gpu:
        enabled: false
      models:
        pull: []
    service:
      type: ClusterIP
  extraEnvFrom:
    - configMapRef:
        name: shared-configmap-rag
  extraEnvVars:
    - name: WEBUI_NAME
      value: "Private AI"
    - name: ENABLE_CODE_EXECUTION
      value: "false"
    - name: ENABLE_CODE_INTERPRETER
      value: "false"
    - name: ENABLE_EVALUATION_ARENA_MODELS
      value: "false"
    - name: ENABLE_GOOGLE_DRIVE_INTEGRATION
      value: "true"
    - name: ENABLE_ONEDRIVE_INTEGRATION
      value: "true"
    - name: BYPASS_EMBEDDING_AND_RETRIEVAL
      value: "true"
    - name: BYPASS_MODEL_ACCESS_CONTROL
      value: "true"
    - name: USER_PERMISSIONS_WORKSPACE_KNOWLEDGE_ACCESS
      value: "true"
    - name: USER_PERMISSIONS_CHAT_CONTROLS
      value: "false"
    - name: WEBUI_AUTH
      value: "true"
    - name: API_KEY_ALLOWED_ENDPOINTS
      value: /api/v1/knowledge/,/api/v1/knowledge/list
    - name: WEBUI_SECRET_KEY
      valueFrom:
        secretKeyRef:
          name: shared-secrets-rag
          key: JWT_SECRET_KEY
    - name: DATABASE_URL
      valueFrom:
        secretKeyRef:
          name: shared-secrets-rag
          key: DATABASE_URL
private-ai-rest:
  sharedConfigMap: shared-configmap-rag
  sharedSecrets: shared-secrets-rag
  postgresql:
    database: private-ai-rest
  image:
    pullPolicy: Always
  ingress:
    enabled: true
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-prod
      kubernetes.io/ingress.class: nginx
      kubernetes.io/tls-acme: "true"
      nginx.ingress.kubernetes.io/backend-protocol: http
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      nginx.ingress.kubernetes.io/tls-acme: "true"
    hosts:
      - host:
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls:
      - secretName: private-ai-rest-tls
        hosts:
  config:
    postgresHost: # system provided
    postgresSecret: # system provided
postgresql:
  primary:
    initdb:
      scripts:
        01-init.sql: |
          CREATE DATABASE "open-webui" WITH OWNER postgres;
          CREATE DATABASE "private-ai-rag" WITH OWNER postgres;
          CREATE DATABASE "private-ai-rest" WITH OWNER postgres;
rag:
  secretArgocdHook: PreSync
  custom:
    {}
    # logo: # user provided
    # bgImageAuth: # user provided
    # bgMovieAuth: # user provided
    # sector:  # user provided
  apiBaseUrl: # system provided
  allowedCorsOrigin: # system provided
  # googleAllowedExtensions: # user provided
  gcsBucketName: # user provided
  googleApiScopes: # system provided
  postgresHost: # system provided

postInstall:
  chosenPostInstallOptions: ""

backups:
  enabled: false
  schedule: "0 */8 * * *"
  # gcsBucketName: # user provided
  # googleApplicationCredentialsSecretRef: defaults to global.googleApplicationCredentialsSecretRef

nh-rag-api:
  enabled: false
  image:
    repository: nethopper/nh-rag-api
    tag: "v0.0.4"
  env:
    LLAMAINDEX_OLLAMA_BASE_URL: http://open-webui-ollama:11434
    QDRANT_URL: # system provided
nh-rag-worker:
  enabled: false
  image:
    repository: nethopper/nh-rag-worker
    tag: "v0.0.4"
  env:
    LLAMAINDEX_OLLAMA_BASE_URL: http://open-webui-ollama:11434
    QDRANT_URL: # system provided
redis:
  enabled: false
  architecture: standalone
  auth:
    enabled: false
  master:
    persistence:
      enabled: true
      size: 8Gi
      storageClass: "" # Optionally set your storage class
  replica:
    replicaCount: 0
