oauth2-proxy:
  config:
    clientID:
    clientSecret:
    cookieSecret:
    configFile:
  ingress:
    enabled: true
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-prod
      kubernetes.io/ingress.class: nginx
      kubernetes.io/tls-acme: "true"
      nginx.ingress.kubernetes.io/backend-protocol: http
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      nginx.ingress.kubernetes.io/tls-acme: "true"
    host:
    existingSecret: "webui-tls"
    tls:
      - hosts:
        secretName:
# oauth2-proxy:
#   config:
#     # clientID:
#     # clientSecret:
#     # cookieSecret:
#     existingConfig: oauth2-proxy-config
#     configFile: /etc/oauth2-proxy/oauth2_proxy.cfg
#   ingress:
#     enabled: true
#     annotations:
#       cert-manager.io/cluster-issuer: letsencrypt-prod
#       kubernetes.io/ingress.class: nginx
#       kubernetes.io/tls-acme: "true"
#       nginx.ingress.kubernetes.io/backend-protocol: http
#       nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
#       nginx.ingress.kubernetes.io/ssl-redirect: "true"
#       nginx.ingress.kubernetes.io/tls-acme: "true"
#     host:
#     existingSecret: "webui-tls"
#     tls:
#       - hosts:
#         secretName:
# oauth2-configmap:
#   clientId:
#   clientSecret:
#   cookieSecret:
#   email_domains:
#   oidc_issuer_url:
#   pass_access_token:
#   pass_user_headers:
#   pass_host_header:
#   pass_authorization_header:
#   set_xauthrequest:
#   skip_provider_button:
#   provider:
#   provider_display_name:
#   redirect_url:
#   upstreams:
#   whitelist_domains:
#   cookie_domains:
#   cookie_expire:
#   cookie_name:
#   upstream_timeout:
#   reverse_proxy:
#   scope:
