apiVersion: camel.apache.org/v1
kind: Integration
metadata:
  name: gdrivegcs-api
  namespace: {{ .Values.camelK.namespace }}
  labels:
    app: {{ .Release.Name }}
    integration: gdrivegcs-api
spec:
  replicas: {{ .Values.camelK.replicas }}
  dependencies:
    - "camel:jackson"
    - "camel:google-drive"
    - "camel:google-storage"
    - "camel:platform-http"
    - "camel:bean"
    - "camel:direct"
    - "camel:rest"
  configuration:
    - type: secret
      value: {{ .Release.Name }}-gdrivegcs-credentials
  sources:
    - name: "api.yaml"
      content: |
        - rest:
            id: "gdrivegcs-api"
            produces: "application/json"
            consumes: "application/json"
            enableCORS: true
            bindingMode: json
            componentName: platform-http
            host: 0.0.0.0
            port: {{ .Values.endpoint.port }}
            path: "/"
            post:
              path: "{{ .Values.endpoint.path }}"
              description: "Trigger a Google Drive to GCS sync using user OAuth tokens"
              param:
                - name: "body"
                  description: "User credentials and sync options"
                  type: "body"
                  required: true
              to: "direct:process-request"

        - from:
            uri: "direct:process-request"
            steps:
              # Extract request parameters
              - setProperty:
                  name: "userId"
                  jsonpath: "$.body.userId"
              - setProperty:
                  name: "accessToken"
                  jsonpath: "$.body.accessToken"
              - setProperty:
                  name: "refreshToken"
                  jsonpath: "$.body.refreshToken"
              # Setup optional allowedExtensions
              - choice:
                  when:
                    - jsonpath: "$.body.allowedExtensions"
                    - setProperty:
                        name: "allowedExtensions"
                        jsonpath: "$.body.allowedExtensions"
                  otherwise:
                    - setProperty:
                        name: "allowedExtensions"
                        constant: ""
              # Setup idempotent processing for userId if enabled
              {{- if .Values.idempotency.enabled }}
              - idempotentConsumer:
                  expression:
                    simple: "${exchangeProperty.userId}"
                  # Choose repository type
                  memoryDimension: 100
                  # Eager remove completed exchanges
                  removeOnFailure: true
                  removeOnCompletion: true
                  # Set timeout
                  timeoutMaxAge: "{{ .Values.idempotency.expiration }}"
              {{- end }}
              # Main processing logic
              - log:
                  message: "Processing Google Drive sync for user: ${exchangeProperty.userId}"
              # Setup GCS credentials and bucket name
              - setHeader:
                  name: "gcs.bucket"
                  constant: "{{ .Values.gcsBucketName }}"
              - setHeader:
                  name: "gcs.credentials.key"
                  constant: "google-credentials.json"
              - setHeader:
                  name: "userFolder"
                  simple: "user-${exchangeProperty.userId}"
              # Call GDrive listing with user tokens
              - to: "google-drive:files/list?accessToken=${exchangeProperty.accessToken}&refreshToken=${exchangeProperty.refreshToken}&applicationName=CamelK-GDrive-GCS-Sync"
              # Process each file
              - split:
                  simple: "${body}"
                  steps:
                    # Set file details
                    - setHeader:
                        name: "fileId"
                        simple: "${body.id}"
                    - setHeader:
                        name: "fileName"
                        simple: "${body.name}"
                    # Filter by extension if needed
                    - choice:
                        when:
                          - simple: "${exchangeProperty.allowedExtensions} != ''"
                          - script:
                              language: groovy
                              expression: |
                                def fileName = exchange.in.getHeader("fileName")
                                def allowedExtensions = exchange.getProperty("allowedExtensions")

                                if (allowedExtensions == null || allowedExtensions.isEmpty()) {
                                  return true // No filtering needed
                                }

                                def extensions = allowedExtensions.split(",")
                                for (ext in extensions) {
                                  ext = ext.trim()
                                  if (ext.startsWith(".")) {
                                    if (fileName.toLowerCase().endsWith(ext.toLowerCase())) {
                                      return true
                                    }
                                  } else {
                                    if (fileName.toLowerCase().endsWith("." + ext.toLowerCase())) {
                                      return true
                                    }
                                  }
                                }
                                return false
                    # Download file content
                    - to: "google-drive:files/get?fileId=${header.fileId}&accessToken=${exchangeProperty.accessToken}&refreshToken=${exchangeProperty.refreshToken}"
                    # Upload to GCS
                    - setHeader:
                        name: "CamelGoogleStorage.bucketName"
                        simple: "${header.gcs.bucket}"
                    - setHeader:
                        name: "CamelGoogleStorage.objectName"
                        simple: "${header.userFolder}/${header.fileName}"
                    - setHeader:
                        name: "CamelGoogleStorage.serviceAccountKey"
                        simple: "RAW(${exchangeProperty[${header.gcs.credentials.key}]})"
                    - to: "google-storage:${header.gcs.bucket}"
                    - log:
                        message: "Uploaded ${header.fileName} to GCS bucket: ${header.gcs.bucket} in folder: ${header.userFolder}"
              # Return success response
              - setBody:
                  constant: "{\"status\": \"success\", \"message\": \"Google Drive sync initiated successfully\"}"
