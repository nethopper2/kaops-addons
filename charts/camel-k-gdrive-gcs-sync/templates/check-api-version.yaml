apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Release.Name }}-api-version-check
  namespace: {{ .Values.camelK.namespace }}
  labels:
    app: {{ .Release.Name }}
    component: api-version-check
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-10"
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
spec:
  backoffLimit: 1
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}
        component: api-version-check
    spec:
      serviceAccountName: {{ .Release.Name }}-sa
      restartPolicy: Never
      containers:
      - name: kubectl
        image: bitnami/kubectl:latest
        command: ["/bin/bash", "-c"]
        args:
        - |
          set -e

          echo "Detecting Camel K API versions..."

          # Check if we can access the Kamelets CRD
          KAMELET_API="v1"
          if ! kubectl get crd kamelets.camel.apache.org 2>/dev/null; then
            echo "INFO: Cannot access Kamelets CRD directly. Using default API version v1."
          else
            echo "Kamelet CRD is available"
            # Try to determine API version if possible
            if kubectl get --raw /apis/camel.apache.org/v1/kamelets 2>/dev/null; then
              echo "Kamelet API v1 is confirmed"
              KAMELET_API="v1"
            elif kubectl get --raw /apis/camel.apache.org/v1alpha1/kamelets 2>/dev/null; then
              echo "Kamelet API v1alpha1 is available"
              KAMELET_API="v1alpha1"
            fi
          fi

          # Default integration API version
          INTEGRATION_API="v1"
          if ! kubectl get crd integrations.camel.apache.org 2>/dev/null; then
            echo "INFO: Cannot access Integrations CRD directly. Using default API version v1."
          else
            echo "Integration CRD is available"
            # Try to determine API version if possible
            if kubectl get --raw /apis/camel.apache.org/v1/integrations 2>/dev/null; then
              echo "Integration API v1 is confirmed"
              INTEGRATION_API="v1"
            elif kubectl get --raw /apis/camel.apache.org/v1alpha1/integrations 2>/dev/null; then
              echo "Integration API v1alpha1 is available"
              INTEGRATION_API="v1alpha1"
            fi
          fi

          echo "API Versions to be used:"
          echo "- Kamelet: $KAMELET_API"
          echo "- Integration: $INTEGRATION_API"

          # Create a ConfigMap with the detected versions
          cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: {{ .Release.Name }}-camel-api-versions
            namespace: {{ .Values.camelK.namespace }}
            labels:
              app: {{ .Release.Name }}
          data:
            KAMELET_API_VERSION: "$KAMELET_API"
            INTEGRATION_API_VERSION: "$INTEGRATION_API"
          EOF

          echo "Created ConfigMap with API versions"
